% clear previous connection. Start a new connection with the Simulation. 
clear;
javaclasspath('/Applications/MATLAB_R2021b.app/toolbox/EV3_Toolbox/EV3');
brick = Brick('ioType','wifi','wfAddr','127.0.0.1','wfPort',5555,'wfSN','0016533dbaf5');

% defining the motor ports
MOTOR_LEFT = 'A';
MOTOR_RIGHT = 'B';
TOUCH_PORT = 1;
COLOR_PORT = 3;
ULTRA_PORT = 4;

speed = 50;
turningSpeed = 50;

%color

direction = 'straight';

while 1
    switch direction
        case "straight"
            % move forward 24 inches.
            % update direction variable
            direction = moveForward(brick, speed);
        case "back"
            %go back 12 inches.
            moveBack(brick);
            %update direction based on wall distance
            direction = wallDistance(brick, ULTRA_PORT);
        case "right"
            %turn right function
            %update direction variable
            direction = turnRight(brick, turningSpeed);
        case "left"
            %turn left function
            %update direction variable
            direction = turnLeft(brick, turningSpeed);
        case "stop"
            %stop for 3 seconds.

        case "pickup"
            %pickup passenger.

        case "dropOff"
            %dropoff pessenger. 
    end
end

% move forward 24 inches.
function direction = moveForward(brick, speed)
    while 1
        touch = brick.TouchPressed(1);
        if (touch == 0)
            disp("No Touch");
            %to ensure all motors are at stop
            brick.StopAllMotors('Brake');
            brick.MoveMotor('AB',-speed);
            pause(1);
            brick.StopAllMotors('Brake');
            pause(1);
            %sense color code
            color = findColor(brick, COLOR_PORT);
            %update direction based on direction
            if (color == green)
                direction = dropOff;
                break;
            elseif (color == yellow)
                direction = pickup;
                break;
            elseif (color == red)
                direction = stop;
                break;
            end
        else
            disp("touch")
            brick.StopAllMotors('Brake');
            direction = 'back';
            disp(direction);
            break;
        end
    end
end

%go back 12 inches.
function moveBack(brick)
    disp('going back')
    for i = 1:4            
        brick.MoveMotor('AB',100);
        pause(1);
        brick.StopAllMotors('Brake');
        pause(1);
    end
end

%turn left approx 90 degree
function direction = turnRight(brick, turningSpeed)
    pause(2);
    brick.MoveMotorAngleRel('A', turningSpeed,950,'Brake');
    brick.MoveMotorAngleRel('B',-turningSpeed,950,'Brake');
    brick.WaitForMotor('A');
    brick.WaitForMotor('B');
    brick.StopAllMotors('Brake');
    pause(2);
    %update direction variable
    direction = "straight";
end

function direction = turnLeft(brick, turningSpeed)
    pause(2);
    brick.MoveMotorAngleRel('A', -turningSpeed,950,'Brake');
    brick.MoveMotorAngleRel('B',turningSpeed,950,'Brake');
    brick.WaitForMotor('A');
    brick.WaitForMotor('B');
    brick.StopAllMotors('Brake');
    pause(2);
    %update direction variable
    direction = "straight";
end

% manual remote control mode
function remoteControll()
    while 1
        pause(0.1);
        switch key
            case 'uparrow' %makes robot move forwards
                brick.MoveMotorAngleRel('A',-100,1900,'Brake');
                brick.MoveMotorAngleRel('B',-100,1900,'Brake');

            case 'downarrow' %makes robot move backwards
                brick.MoveMotorAngleRel('A',100,1900,'Brake');
                brick.MoveMotorAngleRel('B',100,1900,'Brake');

            case 'rightarrow' %makes robot turn right
                brick.MoveMotorAngleRel('A',100,500,'Brake');
                brick.MoveMotorAngleRel('B',100,-500,'Brake');

            case 'd' %makes robot turn 90 degrees right
                brick.MoveMotorAngleRel('A',100,500,'Brake');
                brick.MoveMotorAngleRel('B',100,-500,'Brake');
                pause(1.5);

            case 'leftarrow' %makes robot turn left
                brick.MoveMotorAngleRel('A',100,-500,'Brake');
                brick.MoveMotorAngleRel('B',100,500,'Brake');

            case 'a' %makes robot turn 90 degrees left
                brick.MoveMotorAngleRel('A',100,-500,'Brake');
                brick.MoveMotorAngleRel('B',100,500,'Brake');
                pause(1.5);

            case 'z'
                brick.MoveMotorAngleRel('C',100,-1900,'Coast');

            case 'x'
                brick.MoveMotorAngleRel('C',100,1900,'Coast');

            case 'm'
                brick.playTone(75,440,100);
                pause(0.2);
                brick.playTone(75,466,100);
                pause(0.2);
                brick.playTone(75,523,100);
                pause(0.2);
                brick.playTone(75,587,750);

            case 'v'
                brick.playTone(75,523,250);
                pause(0.2);
                brick.playTone(75,523,250);
                pause(0.2);
                brick.playTone(75,523,250);
                pause(0.25);
                brick.playTone(75,523,500);
                pause(0.25);
                brick.playTone(75,415,500);
                pause(0.3);
                brick.playTone(75,466,500);
                pause(0.25);
                brick.playTone(75,523,500);
                pause(0.3);
                brick.playTone(75,466,500);
                pause(0.1);
                brick.playTone(75,523,1000);
            case 0
                brick.StopAllMotors('Coast');
            case 'q'
                direction = "straight"
                break;
        end
    end
end

% fetch color sensor data
function color = findColor(brick, port)
    color = brick.ColorCode(port);
    switch color
       case 6
           color = "white";
       case 5
           color = "red";
       case 4
           color = "yellow";
       case 3
           color = "green";
    end
    % display color variable for debugging
    disp(color);
end

% function touch = isTouched(port)
%     touch = brick.TouchPressed(port);
%     % display touch variable for debugging.
%     disp(touch);
% end

%measure the distance from the wall in inches.
function direction = wallDistance(brick, port)
    INCHES_CONVERSION = 2.54;
    distance = brick.UltrasonicDist(port);
    distance = distance / INCHES_CONVERSION;
    disp(distance);
    if (distance > 24)
        direction = "right";
    else
        direction = "left";
    end
end